// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace WarProtocol {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MetricEventNotifyProto {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_login_proto_MetricEventNotify__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::WarProtocol.MetricEventNotify, global::WarProtocol.MetricEventNotify.Builder> internal__static_login_proto_MetricEventNotify__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static MetricEventNotifyProto() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cht3YXIvTWV0cmljRXZlbnROb3RpZnkucHJvdG8SC2xvZ2luLnByb3RvGiRn" + 
          "b29nbGUvcHJvdG9idWYvY3NoYXJwX29wdGlvbnMucHJvdG8iOQoRTWV0cmlj" + 
          "RXZlbnROb3RpZnkSEAoIZXZlbnRfaWQYASACKA0SEgoKZXZlbnRfZGF0YRgC" + 
          "IAEoDEIqwj4nCg1Qcm90b2J1ZlRlc3QyEhZNZXRyaWNFdmVudE5vdGlmeVBy" + 
          "b3Rv");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_login_proto_MetricEventNotify__Descriptor = Descriptor.MessageTypes[0];
        internal__static_login_proto_MetricEventNotify__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::WarProtocol.MetricEventNotify, global::WarProtocol.MetricEventNotify.Builder>(internal__static_login_proto_MetricEventNotify__Descriptor,
                new string[] { "EventId", "EventData", });
        pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
        RegisterAllExtensions(registry);
        global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.RegisterAllExtensions(registry);
        return registry;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::Google.ProtocolBuffers.DescriptorProtos.CSharpOptions.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MetricEventNotify : pb::GeneratedMessage<MetricEventNotify, MetricEventNotify.Builder> {
    private MetricEventNotify() { }
    private static readonly MetricEventNotify defaultInstance = new MetricEventNotify().MakeReadOnly();
    private static readonly string[] _metricEventNotifyFieldNames = new string[] { "event_data", "event_id" };
    private static readonly uint[] _metricEventNotifyFieldTags = new uint[] { 18, 8 };
    public static MetricEventNotify DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MetricEventNotify DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MetricEventNotify ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::WarProtocol.MetricEventNotifyProto.internal__static_login_proto_MetricEventNotify__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MetricEventNotify, MetricEventNotify.Builder> InternalFieldAccessors {
      get { return global::WarProtocol.MetricEventNotifyProto.internal__static_login_proto_MetricEventNotify__FieldAccessorTable; }
    }
    
    public const int EventIdFieldNumber = 1;
    private bool hasEventId;
    private uint eventId_;
    public bool HasEventId {
      get { return hasEventId; }
    }
    [global::System.CLSCompliant(false)]
    public uint EventId {
      get { return eventId_; }
    }
    
    public const int EventDataFieldNumber = 2;
    private bool hasEventData;
    private pb::ByteString eventData_ = pb::ByteString.Empty;
    public bool HasEventData {
      get { return hasEventData; }
    }
    public pb::ByteString EventData {
      get { return eventData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEventId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _metricEventNotifyFieldNames;
      if (hasEventId) {
        output.WriteUInt32(1, field_names[1], EventId);
      }
      if (hasEventData) {
        output.WriteBytes(2, field_names[0], EventData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEventId) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, EventId);
        }
        if (hasEventData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, EventData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MetricEventNotify ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricEventNotify ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricEventNotify ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MetricEventNotify ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MetricEventNotify ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricEventNotify ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MetricEventNotify ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MetricEventNotify ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MetricEventNotify ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MetricEventNotify ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MetricEventNotify MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MetricEventNotify prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MetricEventNotify, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MetricEventNotify cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MetricEventNotify result;
      
      private MetricEventNotify PrepareBuilder() {
        if (resultIsReadOnly) {
          MetricEventNotify original = result;
          result = new MetricEventNotify();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MetricEventNotify MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::WarProtocol.MetricEventNotify.Descriptor; }
      }
      
      public override MetricEventNotify DefaultInstanceForType {
        get { return global::WarProtocol.MetricEventNotify.DefaultInstance; }
      }
      
      public override MetricEventNotify BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MetricEventNotify) {
          return MergeFrom((MetricEventNotify) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MetricEventNotify other) {
        if (other == global::WarProtocol.MetricEventNotify.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEventId) {
          EventId = other.EventId;
        }
        if (other.HasEventData) {
          EventData = other.EventData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_metricEventNotifyFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _metricEventNotifyFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEventId = input.ReadUInt32(ref result.eventId_);
              break;
            }
            case 18: {
              result.hasEventData = input.ReadBytes(ref result.eventData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEventId {
        get { return result.hasEventId; }
      }
      [global::System.CLSCompliant(false)]
      public uint EventId {
        get { return result.EventId; }
        set { SetEventId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetEventId(uint value) {
        PrepareBuilder();
        result.hasEventId = true;
        result.eventId_ = value;
        return this;
      }
      public Builder ClearEventId() {
        PrepareBuilder();
        result.hasEventId = false;
        result.eventId_ = 0;
        return this;
      }
      
      public bool HasEventData {
        get { return result.hasEventData; }
      }
      public pb::ByteString EventData {
        get { return result.EventData; }
        set { SetEventData(value); }
      }
      public Builder SetEventData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEventData = true;
        result.eventData_ = value;
        return this;
      }
      public Builder ClearEventData() {
        PrepareBuilder();
        result.hasEventData = false;
        result.eventData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static MetricEventNotify() {
      object.ReferenceEquals(global::WarProtocol.MetricEventNotifyProto.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
